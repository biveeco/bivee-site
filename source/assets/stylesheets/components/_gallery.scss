// =============================================================================
// Gallery module
// -> arrange child elements into even rows and columns
// =============================================================================
// sass-lint:disable mixins-before-declarations
// -> gallery-item mixin contains media queries and overrides, so it needs to come
//    after declarations

@import '../config/spacing';
@import '../config/scale';
@import '../config/type';

$gallery-gutter: space();

// Block
// -----------------------------------------------------------------------------

[data-ui-gallery] {
  display: block;
  font-size: 0;
  list-style: none;
  margin: -($gallery-gutter / 2); // offset for column gutters
  position: relative; // in case flexbox isn't supported
  text-align: left;

  > ul {
    list-style: none;
    margin-left: 0;
    padding-left: 0;
  }

  @supports (display: grid) {
    // Disable 'spelling' linter b/c it doesn't recognize grid properties
    // scss-lint:disable PropertySpelling
    display: grid;
    grid-column-gap: $gallery-gutter;
    grid-row-gap: $gallery-gutter;
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    margin: 0;
  }
}

// Elements
// -----------------------------------------------------------------------------

[data-ui-gallery-item] {
  // Need to break the alphabetical rule order here so it's easier to see how the fallbacks work
  // sass-lint:disable property-sort-order
  display: inline-block;
  font-size: $type-size-default;
  margin: 0;
  padding: ($gallery-gutter / 2);
  position: relative;
  vertical-align: top;

  // fallback fluid sizing method using a calc() hack
  // -> allows grid to be somewhat responsive without media queries
  // -> mainly for IE and old browsers
  // https://www.sitepoint.com/responsive-css-patterns-without-media-queries/
  max-width: 100%;
  min-width: (100% / 3);
  width: calc((600px - 100%) * 1000);

  @supports (display: flex) {
    display: flex;
  }

  // CSS grid version
  // -> all the responsive things, all the time, all the glory
  // -> for modern browsers
  @supports (display: grid) {
    max-width: auto;
    min-width: auto;
    padding: 0;
    width: auto;
  }
}

// Traits
// -----------------------------------------------------------------------------

// create a variation of .l-gallery with these overrides
// -> example: .l-gallery--small { @include gallery-variation(200px); }
// -> @param NUMBER $min-width: the minimum width of the col, in pixels
// -> @param NUMBER $breakpoint: the point at which the legacy grid will switch to its large view
// -> @param NUMBER $min-percentage: the smallest pecentage width the col can be
// -> @param NUMBER $max-percentage: the largest percentage width the col can be
@mixin gallery-variation(
  $min-width: 240px,
  $breakpoint: 600px,
  $min-percentage: 33%,
  $max-percentage: 100%
) {
  @supports (display: grid) {
    // Disable 'spelling' linter b/c it doesn't recognize grid properties
    // scss-lint:disable PropertySpelling
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  }

  [data-ui-gallery-item] {
    max-width: $max-percentage;
    min-width: $min-percentage;
    width: calc((#{$breakpoint} - 100%) * 1000);
  }
}

[data-ui-gallery~='small'] {
  @include gallery-variation(
    $min-width: 180px,
    $breakpoint: 480px,
    $min-percentage: 25%
  );
}

@include breakpointify-attr($attr: 'data-ui-gallery', $value: 'default', $default: true, $sizes: 'small' 'medium') {
  @include gallery-variation();
}

@include breakpointify-attr('data-ui-gallery', $value: 'large', $default: true, $sizes: 'medium' 'large') {
  @include gallery-variation(
    $min-width: 280px,
    $breakpoint: 800px,
    $min-percentage: 33%
  );
}

[data-ui-gallery~='flush'] [data-ui-gallery-item] {
  padding: 0;
}
