// =============================================================================
//  Button
//  -> brief description
// =============================================================================

@import '../config/color';
@import '../config/animation';
@import '../config/scale';
@import '../config/type';
@import '../config/borders';

$button-icon-size: 1em;
$button-icon-margin: ms(0, 1em);

// Block
// -----------------------------------------------------------------------------

[data-ui-button] {
	@include border-radius();
	@include color('text' 'primary');
	@include color-border('text' 'primary', $hover: 15, $active: -15, $focus: 15);
	@include color-background('bg', $grade: 20, $opacity: 0.2, $hover: 10, $active: -10, $focus: 10);
	@include font('bold');
	@include se-shadow($blur: 0, $spread: 0.0625rem, $opacity: 0.5);
	@include transition;
	border-style: border-style();
	border-bottom-style: border-style();
	border-width: border-width('thin');
	cursor: pointer;
	display: inline-block;
	font-size: scale-type('epsilon');
	margin-bottom: border-width('thin'); // webkit bug: set a default bottom margin to keep border from overflowing the bottom of its container - gets cut off by overflow: hidden
	padding: ms(-1, 1em) ms(2, 1em);
	position: relative;
	text-decoration: none;
	text-shadow: none;

	&:hover {
		@include se-shadow($position: 0 0.125rem, $blur: 0.25rem);
		@include color('text' 'primary');
	}

	&:active {
		box-shadow: none;
	}
}


// Traits
// -----------------------------------------------------------------------------

// --- icons
[data-ui-button~='icon'] {
	$icon-space: ($button-icon-margin + $button-icon-size + 0.8em);
	padding-right: $icon-space;

	&[data-ui-button~='left'] {
		padding-left: $icon-space;
		padding-right: ms(3, 1em);
	}
}

// --- size
[data-ui-button~='small'] {
	font-size: scale-type('eta');
}

[data-ui-button~='large'] {
	font-size: scale-type('epsilon');
}

// --- role
[data-ui-button~='primary'] {
	// sass-lint:disable no-important
	// -> need important here because it should always always always be white
	@include color-background('text' 'primary', $hover: 6, $active: -6, $focus: 6);
	@include color-border('text' 'primary', $grade: -10, $hover: 10, $active: 0, $focus: 10);
	@include color('bg');
	// color: $white !important;
}

// --- special effects
// a button that has no border or box around it; displays only its child element (label or icon)
[data-ui-button~='incognito'] {
	// use !important in color props to override all theme variations, e.g. [data-ui-button].c-theme-reverse
	background: transparent !important;
	border: 0 !important;
	border-radius: 0 !important;
	box-shadow: none !important;
	padding: 0;
	position: relative;
	text-decoration: none;
	text-shadow: none;
}

// a button that toggles the visibility of child elements based on state
[data-ui-button~='toggle'] {
	[data-ui-button-toggle-item] {
		pointer-events: none;
	}

	[data-ui-button-toggle-item~='default'] {
		display: inline-block;
	}

	[data-ui-button-toggle-item~='active'] {
		display: none;
	}

	&.is-active {
		@include color('highlight');

		[data-ui-button-toggle-item~='default'] {
			display: none;
		}

		[data-ui-button-toggle-item~='active'] {
			display: inline-block;
		}
	}
}

// Elements
// -----------------------------------------------------------------------------

// use descendent selector to increase specificity, to ensure this overrides the icon component
[data-ui-button-icon][data-ui-button-icon] {
	height: $button-icon-size;
	width: $button-icon-size;

	[data-ui-button~='icon'] & {
		margin-top: -(($button-icon-size / 2) + 0.05em);
		position: absolute;
		right: $button-icon-margin;
		top: 50%;
	}

	[data-ui-button~='icon'][data-ui-button~='left'] & {
		left: $button-icon-margin;
		right: auto;
	}
}

[data-ui-button-flyout] {
	$duration: 0.25s;
	margin-top: space('narrow');
	min-width: 12rem;
	opacity: 0;
	position: absolute;
	right: 0;
	transition: opacity $duration, visibility $duration;
	visibility: hidden;
	z-index: z('high');

	&.is-active {
		opacity: 1;
		visibility: visible;
	}

	&::before {
		$size: 1rem;
		@include triangle('up', $size, ($size / 2), color('bg'));
		content: '';
		display: block;
		position: absolute;
		right: space('narrow');
		top: -(($size / 2) - 0.0625rem);
	}
}
