// =============================================================================
// Color theme utilities
// ==========================================================================

// Allow 'important!' here because we want the styles to always apply in small utility classes
// sass-lint:disable no-important

@import '../config/color';

// Mixins
// -> private - only for generating utility classes in this file
// --------------------------------------------------------------------------

// create utility classes for each color theme defined in config/color
// e.g. '.c-theme-reverse' and '.c-theme-wash'
@each $theme, $colors in $themes {
  @if $theme != 'default' {
    .c-theme-#{$theme} {
      @include theme($theme);
    }
  }
}

body,
.c-theme-default {
  @include theme('default');
}


// Utility classes
// -> use on individual elements to apply special color treatment
// --------------------------------------------------------------------------

.c-text-primary {
  @include color('text' 'primary', $important: true);
}

.c-text-secondary {
  @include color('text' 'secondary', $important: true);
}

// make the text (or foreground element) the background color
.c-text-reverse {
  @include color('bg');
}

.c-highlight {
  @include color('highlight', $important: true);
}

.c-well {
  @include color-background('well', $important: true);
}

// change the color of the border
@each $color in ['highlight', 'island', 'well'] {
  .c-border-#{$color} {
    @include color-border($color, $important:  true);
  }
}

// change the color of the background to match another theme
@each $theme, $colors in $themes {
  .c-bg-#{$theme} {
    background-color: color('bg', $theme) !important;
  }
}

.c-bg-transparent {
  background-color: transparent !important;
}

// --- painted backgrounds
// -> usage: ".c-painted-bg-01", "c-painted-bg-05", etc.
// -> 9 versions available
// -> use with "c-bg-transparent" or "c-bg-[theme]" to control the background of the container. otherwise it will inherit the bg color of the parent theme (e.g. 'dark') which may obscure the paint texture. I'm leaving this unopinionated to avoid specificity wars with c-theme-* utils.

// base styles
[class*='c-bg-painted'] {
  position: relative;
  z-index: 1; // add a z-index value so subsequent containers 'overlap' correctly

  &::before {
    background-position: bottom center;
    background-repeat: no-repeat;
    content: '';
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    z-index: 0;
  }

  &::after {
    content: '';
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    z-index: 1;
  }

  // make sure children are located above the bg color.
  > * {
    z-index: 2;
  }

  // make some selectors to set background color for each theme
  // -> selectors here are a bit too complicated to just use the background-color mixin
  @each $theme, $colors in $themes {
    @if $theme != 'default' {
      .c-theme-#{$theme} &,
      &.c-theme-#{$theme} {
        &::after {
          background-color: color('bg', $theme);
        }
      }
    }
  }
}

// Background versions
// Arguments:
// $image-name (string, required): the filename of the image without extension
// $image-path (string): path the file
// $color (string): color role of the background, e.g. 'well' or 'reverse'
// $bg-widths (list of numbers): the widths of your scaled background images
// $aspect-ratio (number): the height/width ratio of your scaled images - used to calculate bg height and offset for each media query.

@mixin _painted-background-variation(
  $image-name,
  $image-path: '/assets/images/backgrounds/',
  $color: 'bg',
  $bg-widths: (480, 800, 1200, 2000, 2600),
  $aspect-ratio: 0.096153846,
  $side: 'top'
) {

  $initial-width: nth($bg-widths, 1);
  $initial-height: round($initial-width * $aspect-ratio * 1px);
  $initial-factor: 2;

  // put the paint texture in a pseudo element so we can position it slightly outside the container boundary without interfering with its internal spacing (padding, etc.)
  &::before {
    #{$side}: -($initial-height / $initial-factor);
    background-image: url('#{$image-path}#{$image-name}@#{$initial-width}w.png');
    height: $initial-height;
  }

  // put the bg color in another pseudo element so we can place it precisely under the paint texture without interfering with padding, etc.
  &::after {
    #{$side}: ($initial-height - ($initial-height / $initial-factor));
  }

  // set some initial conditions and we'll increment them in each media query below
  $current-width: $initial-width; // the width of the screen size for which we'll be scaling the image, e.g. 800w image for a 480 screen, 1200w for an 800 screen, and so on. Equals the previous $key in $bg-widths.
  $outset-factor: $initial-factor; // the fraction of the paint texture sticking out the top of the container, which decreases for each increase in size, e.g. 1/3 for 480, 1/4 for 800, etc.

  // loop through the $bg-widths map above and set up media queries for each scaled version of the bg image
  @each $size in $bg-widths {
    $height: round($size * $aspect-ratio * 1px);
    // using pixel units in the media queries because we're scaling for raster bg images and also because casting strings to real numbers is murder in Sass
    @include media('>#{$current-width}px') {
      // margin-top: _top-outset($size, $outset-factor);

      &::before {
        #{$side}: -($height / $outset-factor);
        background-image: url('#{$image-path}#{$image-name}@#{$size}w.png');
        height: $height;
      }

      &::after {
        #{$side}: ($height - ($height / $outset-factor));
        #{if($side == 'top', 'bottom', 'top')}: 0;
      }
    }

    $current-width: $size;
    $outset-factor: ($outset-factor + 1);
  }
}

// background versions
@each $theme, $colors in $themes {
  @if $theme != 'default' {
    // loop through 9 background versions for each theme
    @for $i from 1 through 9 {
      @each $side in (top, bottom) {
        .c-bg-painted-#{$side}-0#{$i}.c-theme-#{$theme} {
          @include _painted-background-variation('#{$theme}/#{$side}/0#{$i}', $side: $side);
        }
      }
    }
  }
}
