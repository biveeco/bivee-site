/* =============================================================================
//  Global type styles
// ========================================================================== */

/*doc

*/

@import "../core/libs";
@import "../core/scale";
@import "../core/fonts";

// default type sizes
$type-size-default: 16px;
$type-size-amp: 1.1em; // size of ampersands relative to their context
$type-line_height: 1.6;

// set type to default body size using REMs
// -> useful for resetting type size on a container to override parents
@mixin type-size-default {
    @include rem(font-size, $type-size-default);
}

// set up viewport-sized fluid type scaling, with minimum and maximum sizes
// -> a modified version of Eduardo Boucas' mixin: https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html
// -> also props to this: https://madebymike.com.au/writing/precise-control-responsive-typography/
@mixin type-fluid($size, $min: 'zeta', $max: false, $media-min: 'xsmall', $media-max: 'huge') {
    @if (type-of($min) != 'number') {
        @include scale-type($min);
    } @else {
        @include rem(font-size, $min);
    }

    @include media(">#{$media-min}") {
        font-size: $size;
    }

    @if $max != false {
        @include media(">#{$media-max}") {
            @if (type-of($max) != 'number') {
                @include scale-type($max);
            } @else {
                @include rem(font-size, $max);
            }
        }
    }
}

/* Globals
// -------------------------------------------------------------------------- */

body {
    @include font-body;
    @include scale-type('epsilon');
    line-height: $type-line_height;
}

// headings
h1, h2, h3, h4, h5, h6,
.t-heading {
    @include font-display;
    @include color('text' 'primary');
    display: block;
    line-height: 1.2;
    margin: 0;
    letter-spacing: -0.008em;

    & + & { margin-top: 0.5em; }

    a {
        color: inherit !important;

        // @Jay TODO: specificity issue here
       // &:hover, &:active {
       //     @include color("highlight");
       // }

    }

    strong {
        font-family: inherit;
        font-style: normal;
        font-weight: bold;
    }
}

// body/inline text
p {
    @include scale-type('epsilon');
    @include color('text' 'secondary');
}

a {
    @include color('accent');
    text-decoration: none;
}

strong,
.t-strong { @include font-body('bold'); }

em,
.t-em { @include font-body('normal', 'italic'); }

small,
.t-small {
    @include scale-type('theta');
    @include color('text' 'tertiary');
}

figcaption,
.t-caption {
    @include scale-type('theta');
    @include color('text' 'secondary');
}

address,
.t-address {
    @include scale-type('eta');
    @include color('text' 'secondary');
}

/* Utilities
// -------------------------------------------------------------------------- */

// type scale helpers
@each $name, $size in $scale-type {
    .t-scale-#{$name} { @include scale-type($name); }
}

.t-heading { /* see h1, h2, etc. above */ }

    .t-heading--sub {
        @include font-body;
        line-height: 1.5;
    }

    .t-heading--slug {
        @include font-display("bold");
        text-transform: uppercase;
    }

    .t-heading--fluid {
        &.t-scale-alpha {
            @include type-fluid(5vw, 'delta', 83px);
        }
        &.t-scale-delta {
            @include type-fluid(2.2vw, 'zeta', 'cappa', $media-min: 'small');
        }
    }

// the first paragraph, often set slightly bigger
.t-lead {
    @include scale-type('epsilon');
    @include color('text' 'secondary');
}

.t-caps { text-transform: uppercase !important; }

.t-font-display { @include font-display; }
.t-font-body { @include font-body; }

// position text
@include breakpointify('.t-centered', true) { text-align: center; }
@include breakpointify('.t-left', true) { text-align: left; }
@include breakpointify('.t-right', true) { text-align: right; }

/* use the best ampersands from common system fonts... */
// .t-amp {
//     @include font-ampersand;
//     font-size: $type-size-amp; /* relative to whatever type surrounds it -- it renders slightly bigger */
//     color: inherit;
// }
