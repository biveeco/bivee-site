// =============================================================================
//  Global color styles
// -> base colors are set here on global elements, but modules apply their own
// -> refer to colors ONLY via the $theme maps
// =============================================================================

@import "libs";
@import "animation";

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$blue_kuri: #9FA0AE;
$blue_kuri-dark: #464C56;
$blackberry: #263750;

// highlights
// -> 4 flavors of Bivee. Hat tip to Christie.
$highlights: (
  'blueberry': #11A9BE,
  'raspberry': #EF4759,
  'orange': #EABF32,
  'kiwi': #9BC73F
);

// getter function for highlight colors
// -> PRIVATE
@function highlight($name) {
  @return map-get($highlights, $name);
}

// Themes
// -----------------------------------------------------------------------------

$themes: (
  'default': (
    'text': (
      'primary': $blackberry,
      'secondary': $blue_kuri-dark,
      'tertiary': $blue_kuri
    ),
    'bg': #fff,
    'well': lighten($blue_kuri, 31),
    'shadow': shade($blue_kuri, 15),
    'border': lighten($blue_kuri, 20),
    'highlight': highlight('blueberry'),
    'accent': highlight('raspberry')
  ),
  'dark': (
    'text': (
      'primary': #fff,
      'secondary': lighten($blackberry, 65),
      'tertiary': lighten($blackberry, 20)
    ),
    'bg': $blackberry,
    'well': darken($blackberry, 7),
    'shadow': shade($blackberry, 15),
    'border': darken($blackberry, 15),
    'highlight': highlight('blueberry'),
    'accent': highlight('raspberry')
  ),
  'midtone': (
    'text': (
      'primary': #fff,
      'secondary': $blackberry,
      'tertiary': $blackberry
    ),
    'bg': highlight('blueberry'),
    'well': darken(highlight('blueberry'), 5),
    'shadow': shade($blackberry, 15),
    'border': #fff,
    'highlight': #fff,
    'accent': $blackberry
  )
);

// default tint/shadow values for hover/active/focus states
$hover-default: 10;
$active-default: 10;
$focus-default: 10;

// getter function to access color map values
// -> PUBLIC
// -> USAGE:
//      color: color('text' 'primary');
//      color: color('highlight' 'primary', 'reverse');
@function color($colors, $name: 'default') {
  // first extract the 'theme' nested map
  $theme: map-get($themes, $name);

  // now get the nested map for the first color value
  $color: map-get($theme, nth($colors, 1));

  // if there's more than one color string in the $colors list, dig deeper
  @if length($colors) > 1 {
    @for $i from 2 through length($colors) {
      // keep updating $color with the next nested map until we've reached the end of the list
      $color: map-get($color, nth($colors, $i));
    }
  }
  @return $color;
}

// add "!important" to the end of a property
@function _important($prop, $add: false) {
  @if $add == true {
    @return append($prop, unquote(" !important"));
  } @else {
    @return $prop;
  }
}

// print out the color styles (and state, if needed) for a given attribute
// -> PRIVATE
@mixin _color-props(
  $color,
  $prop: color,
  $hover: false,
  $active: false,
  $focus: false,
  $animate: true,
  $important: false
) {
  // set color for default theme
  #{$prop}: _important(color($color), $important);

  @if ($animate == true) {
    @include transition($prop);
  }

  // hover/active/focus states
  @if $hover != false {
    &:hover {
      $percentage: if(type-of($hover) == 'number', $hover, $hover-default);
      #{$prop}: _important(tint(color($color), $percentage), $important);
    }
  }

  @if $active != false {
    &:active {
      $percentage: if(type-of($active) == 'number', $active, $active-default);
      #{$prop}: _important(shade(color($color), $percentage), $important);
    }
  }

  @if $focus != false {
    &:focus {
      $percentage: if(type-of($focus) == 'number', $focus, $focus-default);
      #{$prop}: _important(tint(color($color), $percentage), $important);
    }
  }
}

// add colors for each theme
// -> PUBLIC
// -> PARAMS:
//    - STRING/LIST $color: the name of the color you want to use, e.g. "highlight"
//    - STRING $attr (optional): the attribute this will apply to, e.g. "background-color"
//    - BOOLEAN/NUMBER $hover, $active, $focus (optional): include state?
//      -> pass in "true" for each to pick up the default hover, active, and focus colors
//      -> pass in a number to change the color gradation (e.g. $hover: 12 will lighten
//         hover state color by 12%)
//    - BOOLEAN $important (optional): add the "!important" prop?
// -> USAGE:
//      @include color(text primary, background-color, true, false, 12, true);
@mixin color(
  $color,
  $prop: color,
  $hover: false,
  $active: false,
  $focus: false,
  $important: false
) {
  @include _color-props($color, $prop, $hover, $active, $focus, $important);

  // set the color of this element to match the theme of this context
  @each $theme, $colors in $themes {
    @if $theme != "default" {
      // set color to theme of either this element or its parent
      &.c-theme-#{$theme}, .c-theme-#{$theme} & {
        @include _color-props($color, $prop, $hover, $active, $focus, $important);
      }
    }
  }
}

// shortcut decorators for the above, using specific attributes
@mixin background-color($color, $props...) {
  @include color($color, $prop: 'background-color', $props...);
}

@mixin border-color($color, $props...) {
  @include color($color, $prop: 'border-color', $props...);
}

// Theme Globals
// -----------------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
  color: color('text' 'secondary', $theme);
  background-color: color('bg', $theme);
  border-color: color('border', $theme) !important;

  // highlight color when you select something
  ::selection {
    background: color('highlight', $theme);
    color: #fff;
    text-shadow: none;
  }

  // ditto, for mozilla engine
  ::-moz-selection {
    background: color('highlight', $theme);
    color: #fff;
    text-shadow: none;
  }
}
