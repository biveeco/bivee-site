// =============================================================================
//  Type config & scale
// =============================================================================

@import 'breakpoints';
@import 'bourbon';
@import 'paths';
@import 'scale';

// default type sizes
$type-size-default: 1rem !default;

// global line heights
$type-leading: (
  'xtight': 1,
  'tight': 1.2,
  'default': 1.75
);

@function type-leading($height: 'default') {
  @return map-get($type-leading, $height);
}

// set up viewport-sized fluid type scaling, with minimum and maximum sizes
// -> a modified version of Indrek Paas' fluid type mixin: https://www.sassmeister.com/gist/7f22e44ace49b5124eec
// -> which is based on Mike Riethmuller's formula: https://madebymike.com.au/writing/fluid-type-calc-examples/
// -> also inspired by Eduardo Boucas' mixin: https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html
@mixin type-fluid($properties: font-size, $size-min: 'eta', $size-max: 'alpha', $screen-min: 'xsmall', $screen-max: 'huge') {

  // set base (min) size as default
  @each $property in $properties {
    #{$property}: scale-type($size-min);
  }

  // start to scale up at the minimum screen size
  @include media('>#{$screen-min}') {
    @each $property in $properties {
      // sass-lint:disable no-duplicate-properties
      // -> using redundant props as fallback here

      // use an in-between value as the fallback where vw units or calc aren't supported
      #{$property}: ((scale-type($size-min) + scale-type($size-max)) / 2);

      // use calc and vw units to make the type scale fluidly between two sizes
      #{$property}: calc(#{scale-type($size-min)} + #{strip-unit(scale-type($size-max) - scale-type($size-min))} * (100vw - #{strip-unit(screen($screen-min))}rem) / #{strip-unit(screen($screen-max) - screen($screen-min))});
    }
  }

  // stop scaling at the maximum screen size
  @include media('>#{$screen-max}') {
    @each $property in $properties {
      #{$property}: scale-type($size-max);
    }
  }
}

// --- Fonts ---

@include font-face(
  'sohne-light-normal',
  '#{$asset-path-fonts}/soehne-web-leicht',
  ['woff', 'woff2', 'eot']
) {
  font-display: swap;
  font-style: normal;
  font-weight: 300;
};

@include font-face(
  'sohne-light-italic',
  '#{$asset-path-fonts}/soehne-web-leicht-kursiv',
  ['woff', 'woff2', 'eot']
) {
  font-display: swap;
  font-style: italic;
  font-weight: 300;
};

@include font-face(
  'sohne-semibold-normal',
  '#{$asset-path-fonts}/soehne-web-halbfett',
  ['woff', 'woff2', 'eot']
) {
  font-display: swap;
  font-style: normal;
  font-weight: 600;
};

@include font-face(
  'sohne-bold-normal',
  '#{$asset-path-fonts}/soehne-web-fett',
  ['woff', 'woff2', 'eot']
) {
  font-display: swap;
  font-style: normal;
  font-weight: 800;
};

@include font-face(
  'financier',
  '#{$asset-path-fonts}/financier-display-web-semibold',
  ['woff', 'woff2', 'eot']
) {
  font-display: swap;
  font-style: normal;
  font-weight: 600;
};

// Fonts
// -----------------------------------------------------------------------------
// -> PUBLIC, use these to style type globally & in modules

$font-weights: (
  'light': 300,
  'semibold': 600,
  'bold': 800
);

@function font-weight($weight: light) {
  @return map-get($font-weights, $weight);
}

@mixin font($weight: light, $style: normal) {
  // swap in the webfont once it loads
  font-family: 'sohne-#{$weight}-#{$style}', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Roboto', sans-serif;
  font-style: $style;
  font-weight: font-weight($weight);
}

@mixin font-display() {
  font-family: 'financier', $font-stack-georgia;
  font-style: normal;
  font-weight: 600;
}
