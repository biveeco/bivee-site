// =============================================================================
//  Type config & scale
// =============================================================================

@import 'libs';
@import 'scale';
@import 'breakpoints';
@import 'paths';

// default type sizes
$type-size-default: 1rem !default;

// global line heights
$type-leading: (
  'xtight': 1,
  'tight': ms(1),
  'default': ms(2)
);

@function type-leading($height: 'default') {
  @return map-get($type-leading, $height);
}

// set up viewport-sized fluid type scaling, with minimum and maximum sizes
// -> a modified version of Indrek Paas' fluid type mixin: https://www.sassmeister.com/gist/7f22e44ace49b5124eec
// -> which is based on Mike Riethmuller's formula: https://madebymike.com.au/writing/fluid-type-calc-examples/
// -> also inspired by Eduardo Boucas' mixin: https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html
@mixin type-fluid($properties: font-size, $size-min: 'eta', $size-max: 'alpha', $screen-min: 'xsmall', $screen-max: 'huge') {

  // set base (min) size as default
  @each $property in $properties {
    #{$property}: scale-type($size-min);
  }

  // start to scale up at the minimum screen size
  @include media('>#{$screen-min}') {
    @each $property in $properties {
      // sass-lint:disable no-duplicate-properties
      // -> using redundant props as fallback here

      // use an in-between value as the fallback where vw units or calc aren't supported
      #{$property}: ((scale-type($size-min) + scale-type($size-max)) / 2);

      // use calc and vw units to make the type scale fluidly between two sizes
      #{$property}: calc(#{scale-type($size-min)} + #{strip-unit(scale-type($size-max) - scale-type($size-min))} * (100vw - #{strip-unit(screen($screen-min))}rem) / #{strip-unit(screen($screen-max) - screen($screen-min))});
    }
  }

  // stop scaling at the maximum screen size
  @include media('>#{$screen-max}') {
    @each $property in $properties {
      #{$property}: scale-type($size-max);
    }
  }
}

// @mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
//   @each $property in $properties {
//     #{$property}: $min-value;
//   }

//   @media screen and (min-width: $min-vw) {
//     @each $property in $properties {
//       #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
//     }
//   }

//   @media screen and (min-width: $max-vw) {
//     @each $property in $properties {
//       #{$property}: $max-value;
//     }
//   }
// }

// Fonts
// -----------------------------------------------------------------------------
// -> font-face mixins use Bourbon

// in supporting browsers, specify the font-loading strategy
@mixin font-display {
  // swap in the webfont once it loads
  font-display: swap;
}

// ----- Libre Franklin ------------------------------------------------------------

// @import url('https://fonts.googleapis.com/css?family=Libre+Franklin:200,300,400,400i,600,600i');

// variable font
@font-face {
  font-family: 'libre-roman-VF';
  src: url('/assets/fonts/variable/LibreFranklinGX-Romans-v4015.ttf') format('woff2-variations'),
    // will be the standard and works in Safari now
    url('/assets/fonts/variable/LibreFranklinGX-Romans-v4015.ttf') format('woff2');
    // for the other supporting browsers
}

// @font-face {
//  font-family: 'libre-roman-regular';
//  src: url('Venn_Regular.woff2') format('woff2');
// }
// @font-face {
//  font-family: 'libre-roman-regular';
//  src: url('Venn_Bold.woff2') format('woff2');
//  font-weight: 700;
// }


// Font mixins
// -----------------------------------------------------------------------------
// -> PUBLIC, use these to style type globally & in modules

@mixin font-display($weight: light) {
  font-family: 'Helvetica';
  @if $weight == 'light' {
    font-weight: 100;
  } @elseif $weight == 'bold' {
    font-weight: 500;
  } @else {
    font-weight: 300;
  }

  @supports (font-variation-settings: 'wght' 100) {
    font-family: 'libre-roman-VF';
    font-variation-settings: 'wght' 80;
  }
}

@mixin font-body($weight: normal, $style: normal) {
  font-family: 'Libre Franklin', $font-stack-system;
  // font-family: 'source-sans-#{$weight}-#{$style}', $verdana;
  font-weight: if($weight == normal, 300, 700);
  @if $style != normal {
    font-style: unquote($style);
  }
}
