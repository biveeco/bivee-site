/* ==========================================================================
//  Global color styles
// -> base colors are set here on global elements, but modules apply their own
// -> refer to colors ONLY via the $theme maps
// ========================================================================== */

@import "libs";

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$blue_kuri--dark : #464C56;
$blue_kuri       : #9FA0AE;
$blackberry : #263750;

// highlights
// -> 4 flavors of Bivee. Hat tip to Christie.
$highlights: (
    'blueberry'  : #11A9BE,
    'raspberry'  : #EF4759,
    'orange'    : #EABF32,
    'kiwi'       : #9BC73F
);

@function highlight($name) {
    @return map-get($highlights, $name);
}

// Themes
// -----------------------------------------------------------------------------
// -> PUBLIC, use these for color references

// note: highlight is default; variations are assigned in local styles
$themes: (
    'default': (
        'text': (
            'primary'    : $blackberry,
            'secondary'  : $blue_kuri--dark,
            'tertiary'   : $blue_kuri
        ),
        'bg'             : #fff,
        'well'           : lighten($blue_kuri, 31),
        'border'         : lighten($blue_kuri, 20),
        'highlight'      : highlight('blueberry'),
        'accent'         : highlight('raspberry')
    ),
    'reverse': (
        'text': (
            'primary'    : #fff,
            'secondary'  : lighten($blackberry, 65),
            'tertiary'   : lighten($blackberry, 20)
        ),
        'bg'             : $blackberry,
        'well'           : darken($blackberry, 7),
        'border'         : darken($blackberry, 15),
        'highlight'      : highlight('blueberry'),
        'accent'         : highlight('raspberry')
    ),
    'wash': (
        'text': (
            'primary'    : #fff,
            'secondary'  : $blackberry,
            'tertiary'   : $blackberry
        ),
        'bg'             : highlight('blueberry'),
        'well'           : darken(highlight('blueberry'), 5),
        'border'         : #fff,
        'highlight'      : #fff,
        'accent'         : $blackberry
    )
);


// "get" function to access theme map values
// -> PUBLIC
// -> USAGE:
//      color: theme('text' 'primary');
//      color: theme('highlight', 'reverse');
@function theme($colors, $name: 'default') {
    // first extract the 'theme' nested map
    $theme: map-get($themes, $name);

    // now get the nested map for the first color value
    $color: map-get($theme, nth($colors, 1));
    // @debug "#{$name}: #{$colors} - #{map-get($theme, nth($colors, 1))}";

    // if there's more than one color string in the $colors list, dig deeper
    @if length($colors) > 1 {
        @for $i from 2 through length($colors) {
            // keep updating $color with the next nested map until we've reached the end of the list
            $color: map-get($color, nth($colors, $i));
            // @debug(nth($colors, 1), $i);
        }
    }
    // @debug(type-of($color));
    @return $color;
}

// better lighten/darken functions
// -> https://gist.github.com/triple-j/065cc9002ae4f8645457
@function tint($color, $percent) {
    @return mix(white, $color, $percent * 1%);
}

@function shade($color, $percent) {
    @return mix(black, $color, $percent * 1%);
}

// darken or lighten a given color
// -> used by color mixin below
@function modify_color($hex, $lighten: 0, $darken: 0) {
    @if $lighten > 0 & $hex != #fff {
        @return tint($hex, $lighten);
    } @elseif $darken > 0 {
        @return shade($hex, $darken);
    } @else {
        @return $hex;
    }
}

// add colors for each theme
// -> PUBLIC
// -> USAGE:
//      @include color(text primary, background-color);
@mixin color($color, $attr: color, $important: false, $lighten: 0, $darken: 0) {
    // set color for default theme
    #{$attr}: modify_color(theme($color), $lighten, $darken)#{if($important != false, " !important", "")};

    // set the color of this element to match the theme of this context
    @each $theme, $colors in $themes {
        // @debug($theme);
        @if $theme != "default" {
            // set color to theme of either this element or its parent
            &.c-theme-#{$theme}, .c-theme-#{$theme} & {
                #{$attr}: modify_color(theme($color, $theme), $darken, $lighten)#{if($important != false, " !important", "")};
            }
        }
    }
}

// Theme Globals
// ----------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
    color: theme('text' 'secondary', $theme);
    background-color: theme('bg', $theme);
    border-color: theme('border', $theme) !important;

    // highlight color when you select something
    ::selection {
      background: theme('highlight', $theme);
      color: #fff;
      text-shadow: none;
    }

    // ditto, for mozilla engine
    ::-moz-selection {
      background: theme('highlight', $theme);
      color: #fff;
      text-shadow: none;
    }
}

/* Utility classes
// -------------------------------------------------------------------------- */

/* --- Themes --------------------------------------------------------------- */
// -> use the class to apply a theme to a container

body, .c-theme-default {
    @include theme('default');
}

// create utility classes for each color theme from the $themes map
// e.g. ".c-theme-reverse" and ".c-theme-wash"
@each $theme, $colors in $themes {
    @if $theme != "default" {
        .c-theme-#{$theme} { @include theme('#{$theme}'); }
    }
}

//
@each $color, $hex in $highlights {
    @if $color != "blueberry" {
        .c-theme-wash--#{$color} {
            background-color: $hex !important;

            .c-well { background-color: darken($hex, 5) !important; }
        }
    }
}


/* --- Individual colors ---------------------------------------------------- */
// -> use on any element to apply special color treatment

.c-text-primary { @include color('text' 'primary', $important: true); }
.c-text-secondary { @include color('text' 'secondary', $important: true); }
.c-text-tertiary { @include color('text' 'tertiary', $important: true); }

.c-highlight { @include color('highlight', $important: true); }
.c-highlight-bg { @include color('highlight', 'background-color'); }

.c-accent { @include color('accent', $important: true); }
.c-accent-bg { @include color('accent', 'background-color'); }

.c-well { @include color('well', 'background-color'); }

.c-bg { @include color('bg'); }
.c-no-bg { background-color: transparent !important; }

// kill background colors in print
// -> note all elements are set to color: black in base/_print.scss
@media print {
    [class^="c-"] { background-color: transparent !important; }
}
